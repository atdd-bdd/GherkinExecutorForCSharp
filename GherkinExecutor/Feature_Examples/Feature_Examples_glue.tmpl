namespace gherkinexecutor.Feature_Examples {
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using static Microsoft.VisualStudio.TestTools.UnitTesting.Assert;

public class Feature_Examples_glue {
    const string DNCString = "?DNC?";


    public void Calculation_Convert_F_to_C(List<FandC> values ) {
        Console.WriteLine("---  " + "Calculation_Convert_F_to_C");
        foreach (FandC value in values){
             Console.WriteLine(value);
             // Add calls to production code and asserts
              FandCInternal i = value.ToFandCInternal();
              }
    }

    public void Rule_ID_must_have_exactly_5_letters_and_begin_with_Q(List<ValueValid> values ) {
        Console.WriteLine("---  " + "Rule_ID_must_have_exactly_5_letters_and_begin_with_Q");
        foreach (ValueValid value in values){
             Console.WriteLine(value);
             // Add calls to production code and asserts
              ValueValidInternal i = value.ToValueValidInternal();
              }
    }

    public void Given_list_of_numbers(List<LabelValue> values ) {
        Console.WriteLine("---  " + "Given_list_of_numbers");
        foreach (LabelValue value in values){
             Console.WriteLine(value);
             // Add calls to production code and asserts
              LabelValueInternal i = value.ToLabelValueInternal();
              }
    }

    public void When_filtered_by_ID_with_value(List<List<string>> values ) {
        Console.WriteLine("---  " + "When_filtered_by_ID_with_value");
        foreach (List<string> value in values){
             Console.WriteLine(value);
             // Add calls to production code and asserts
              }
    }

    public void Then_sum_is(List<List<string>> values ) {
        Console.WriteLine("---  " + "Then_sum_is");
        foreach (List<string> value in values){
             Console.WriteLine(value);
             // Add calls to production code and asserts
              }
    }

    public void When_filtered_by(List<FilterValue> values ) {
        Console.WriteLine("---  " + "When_filtered_by");
        foreach (FilterValue value in values){
             Console.WriteLine(value);
             // Add calls to production code and asserts
              FilterValueInternal i = value.ToFilterValueInternal();
              }
    }

    public void Then_result(List<ResultValue> values ) {
        Console.WriteLine("---  " + "Then_result");
        foreach (ResultValue value in values){
             Console.WriteLine(value);
             // Add calls to production code and asserts
              ResultValueInternal i = value.ToResultValueInternal();
              }
    }

    }
}
